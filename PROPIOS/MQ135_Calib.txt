import math
import time
import dht
from machine import I2C, Pin
import PCF8591_Class

ch_0 = '\x00'
ch_1 = '\x01'
ch_2 = '\x02'
ch_3 = '\x03'

# construct an I2C bus
gpio_scl = Pin(5)
gpio_sda = Pin(4)
i2c = I2C(scl=gpio_scl, sda=gpio_sda, freq=100000)

PCF = PCF8591_Class.PCF8591_I2C(i2c)

sensor = dht.DHT11(Pin(12))

class MQ135(object):
    """ Class for dealing with MQ13 Gas Sensors """
    # The load resistance on the board
    RLOAD = 10.0
    # Calibration resistance at atmospheric CO2 level
    RZERO = 60.4265 #55.891
    # Parameters for calculating ppm of CO2 from sensor resistance
    PARA = 116.6020682
    PARB = 2.769034857

    # Parameters to model temperature and humidity dependence
    CORA = 0.00035
    CORB = 0.02718
    CORC = 1.39538
    CORD = 0.0018
    CORE = -0.003333333
    CORF = -0.001923077
    CORG = 1.130128205

    # Atmospheric CO2 level for calibration purposes
    ATMOCO2 = 420.36


    def __init__(self, pin):
        self.pin = pin

    def get_correction_factor(self, temperature, humidity):
        """Calculates the correction factor for ambient air temperature and relative humidity
        Based on the linearization of the temperature dependency curve
        under and above 20 degrees Celsius, asuming a linear dependency on humidity,
        provided by Balk77 https://github.com/GeorgK/MQ135/pull/6/files
        """

        if temperature < 20:
            return self.CORA * temperature * temperature - self.CORB * temperature + self.CORC - (humidity - 33.) * self.CORD

        return self.CORE * temperature + self.CORF * humidity + self.CORG

    def get_resistance(self):
        """Returns the resistance of the sensor in kOhms // -1 if not value got in pin"""
        value = PCF.Analog_read(self.pin)
        if value == 0:
            return -1

        return (1023./value[0] - 1.) * self.RLOAD

    def get_corrected_resistance(self, temperature, humidity):
        """Gets the resistance of the sensor corrected for temperature/humidity"""
        return self.get_resistance()/ self.get_correction_factor(temperature, humidity)

    def get_ppm(self):
        """Returns the ppm of CO2 sensed (assuming only CO2 in the air)"""
        return self.PARA * math.pow((self.get_resistance()/ self.RZERO), -self.PARB)

    def get_corrected_ppm(self, temperature, humidity):
        """Returns the ppm of CO2 sensed (assuming only CO2 in the air)
        corrected for temperature/humidity"""
        return self.PARA * math.pow((self.get_corrected_resistance(temperature, humidity)/ self.RZERO), -self.PARB)

    def get_rzero(self):
        """Returns the resistance RZero of the sensor (in kOhms) for calibratioin purposes"""
        return self.get_resistance() * math.pow((self.ATMOCO2/self.PARA), (1./self.PARB))

    def get_corrected_rzero(self, temperature, humidity):
        """Returns the resistance RZero of the sensor (in kOhms) for calibration purposes
        corrected for temperature/humidity"""
        return self.get_corrected_resistance(temperature, humidity) * math.pow((self.ATMOCO2/self.PARA), (1./self.PARB))


def mq135lib_example():
    """MQ135 lib example"""
    # setup
    temperature = 21.0
    humidity = 25.0

    mq135_1 = MQ135(ch_0)
    mq135_2 = MQ135(ch_1) 

    # loop
    while True:
      try:
        sensor.measure()
        temp = sensor.temperature()
        hum = sensor.humidity()
        rzero_1 = mq135_1.get_rzero()
        corrected_rzero_1 = mq135_1.get_corrected_rzero(temp, hum)
        #resistance_1 = mq135_1.get_resistance()
        #ppm_1 = mq135_1.get_ppm()
        #corrected_ppm_1 = mq135_1.get_corrected_ppm(temperature, humidity)
        '''
        print("\n Sensor 1 MQ135 RZero: " + str(rzero_1) +"\t Corrected RZero: "+ str(corrected_rzero_1)+
              "\t Resistance: "+ str(resistance_1) +"\t PPM: "+str(ppm_1)+
              "\t Corrected PPM: "+str(corrected_ppm_1)+"ppm")
        #time.sleep_ms(300)
        '''
        rzero_2 = mq135_2.get_rzero()
        corrected_rzero_2 = mq135_2.get_corrected_rzero(temp, hum)
        #resistance_2 = mq135_2.get_resistance()
        #ppm_2 = mq135_2.get_ppm()
        #corrected_ppm_2 = mq135_2.get_corrected_ppm(temperature, humidity)
        '''
        print("\n Sensor 2 MQ135 RZero: " + str(rzero_2) +"\t Corrected RZero: "+ str(corrected_rzero_2)+
              "\t Resistance: "+ str(resistance_2) +"\t PPM: "+str(ppm_2)+
              "\t Corrected PPM: "+str(corrected_ppm_2)+"ppm")
        time.sleep_ms(700)
        '''
        print("\n Sensor 1 MQ135 RZero: " + str(rzero_1) +
              "\t Corrected RZero: "+ str(corrected_rzero_1))
        print("\n Sensor 2 MQ135 RZero: " + str(rzero_2) +
              "\t Corrected RZero: "+ str(corrected_rzero_2))
        time.sleep_ms(800)
      except OSError as e:
        print('\n')
        print('\tFailed to read temperature and humidity.')
        print('\n')

if __name__ == "__main__":
    mq135lib_example()


